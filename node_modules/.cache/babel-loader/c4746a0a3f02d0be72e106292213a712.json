{"ast":null,"code":"import _slicedToArray from \"/Users/melissa/cs91r/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/melissa/cs91r/src/components/Nav.js\";\n\n/** @jsx jsx */\n\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState, useEffect } from \"react\";\nimport { css, jsx } from '@emotion/core';\nimport { CSSTransition } from \"react-transition-group\";\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nconst headerStyle = css`\n  .Nav {\n    position: fixed;\n    top: 0; /* Stick it to the top */\n    max-height: 70px;\n    width: 100vw;\n\n    display: grid;\n    grid-template-areas: \"logo nav\";\n  }\n\n  .Logo {\n    grid-area: logo;\n    height: 70px;\n  }\n\n  .Nav {\n    display: grid;\n    grid-area: nav;\n    grid-template-columns: repeat(4, auto);\n    align-items: center;\n    justify-items: center;\n  }\n  .Nav a {\n    color: #fff;\n    font-size: 20px;\n    font-weight: 500;\n    transition: 0.5s;\n    text-decoration: none;\n  }\n  .Nav a:hover {\n    transform: scale(1.1);\n  }\n  .Nav button {\n    padding: 10px;\n    outline: none;\n    border: none;\n    font-size: 20px;\n    color: #fff;\n    font-weight: 600;\n    box-shadow: 0px 5px 0px 0px rgba(255, 0, 0, 0.25);\n    border-radius: 10px;\n    cursor: pointer;\n    transition: 70ms;\n  }\n\n  .Burger {\n    display: none;\n    grid-area: burger;\n    margin: 0 20px 0 0;\n    padding: 0;\n    justify-self: end;\n    font-size: 40px;\n    border: none;\n    background: none;\n    outline: none;\n    transition: 0.1s;\n  }\n  .Burger:active {\n    transform: scale(1.2);\n  }\n\n  @media (max-width: 700px) {\n    .Nav {\n      grid-template-areas: \"logo burger\" \"nav nav\";\n    }\n    .Nav {\n      grid-template-rows: repeat(4, auto);\n      grid-template-columns: none;\n      grid-row-gap: 20px;\n\n      padding: 30px 0 30px;\n      background: rgba(40, 44, 47, 0.95);\n      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n      border-bottom-left-radius: 10px;\n      border-bottom-right-radius: 10px;\n    }\n    .Burger {\n      display: inline;\n    }\n  }\n\n  .desktop-links {\n    display: flex;\n  }\n\n  .mobile-links {\n    display: inline-block;\n  }\n\n  .NavAnimation-enter {\n    opacity: 0;\n    transform: scale(0.5);\n  }\n  .NavAnimation-enter-active {\n    opacity: 1;\n    transform: translateX(0);\n    transition: opacity 350ms, transform 350ms;\n  }\n  .NavAnimation-exit {\n    opacity: 1;\n  }\n  .NavAnimation-exit-active {\n    opacity: 0;\n    transform: scale(0.5);\n    transition: opacity 350ms, transform 350ms;\n  }\n`;\nexport default function Nav(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isNavVisible = _useState2[0],\n        setNavVisibility = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSmallScreen = _useState4[0],\n        setIsSmallScreen = _useState4[1];\n\n  const renderLink = (link, path) => {\n    const highlight = link.to !== '/' ? path.includes(link.to) : path === '/';\n    return jsx(\"div\", {\n      key: link.text,\n      className: 'link' + (highlight ? ' Highlight' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, jsx(Link, {\n      to: link.to,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, link.text));\n  };\n\n  const renderLinks = () => {\n    const links = props.links,\n          pathname = props.pathname;\n    const parts = pathname.split('/');\n    const path = '/' + parts[1] + (parts[2] ? '/' + parts[2] : '');\n    return jsx(\"div\", {\n      className: `${isNavVisible ? 'desktop-links' : 'mobile-links'}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, links.map(link => {\n      return renderLink(link, path);\n    }));\n  };\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 700px)\");\n    mediaQuery.addListener(handleMediaQueryChange);\n    handleMediaQueryChange(mediaQuery);\n    return () => {\n      mediaQuery.removeListener(handleMediaQueryChange);\n    };\n  }, []);\n\n  const handleMediaQueryChange = mediaQuery => {\n    if (mediaQuery.matches) {\n      setIsSmallScreen(true);\n    } else {\n      setIsSmallScreen(false);\n    }\n  };\n\n  const toggleNav = () => {\n    setNavVisibility(!isNavVisible);\n  };\n\n  return jsx(\"div\", {\n    css: headerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, jsx(\"div\", {\n    className: \"Nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Voting Methods\"), jsx(CSSTransition, {\n    in: !isSmallScreen || isNavVisible,\n    timeout: 350,\n    className: \"NavAnimation\",\n    unmountOnExit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, jsx(\"div\", {\n    className: `${isNavVisible ? 'desktop-links' : 'mobile-links'}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, renderLinks())), jsx(\"button\", {\n    onClick: toggleNav,\n    className: \"Burger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"\\uD83C\\uDF54\")));\n}","map":{"version":3,"sources":["/Users/melissa/cs91r/src/components/Nav.js"],"names":["React","useState","useEffect","css","jsx","CSSTransition","Link","withRouter","headerStyle","Nav","props","isNavVisible","setNavVisibility","isSmallScreen","setIsSmallScreen","renderLink","link","path","highlight","to","includes","text","renderLinks","links","pathname","parts","split","map","mediaQuery","window","matchMedia","addListener","handleMediaQueryChange","removeListener","matches","toggleNav"],"mappings":"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","sourcesContent":["/** @jsx jsx */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState, useEffect } from \"react\";\nimport { css, jsx } from '@emotion/core';\nimport { CSSTransition } from \"react-transition-group\";\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\n\nconst headerStyle = css`\n  .Nav {\n    position: fixed;\n    top: 0; /* Stick it to the top */\n    max-height: 70px;\n    width: 100vw;\n\n    display: grid;\n    grid-template-areas: \"logo nav\";\n  }\n\n  .Logo {\n    grid-area: logo;\n    height: 70px;\n  }\n\n  .Nav {\n    display: grid;\n    grid-area: nav;\n    grid-template-columns: repeat(4, auto);\n    align-items: center;\n    justify-items: center;\n  }\n  .Nav a {\n    color: #fff;\n    font-size: 20px;\n    font-weight: 500;\n    transition: 0.5s;\n    text-decoration: none;\n  }\n  .Nav a:hover {\n    transform: scale(1.1);\n  }\n  .Nav button {\n    padding: 10px;\n    outline: none;\n    border: none;\n    font-size: 20px;\n    color: #fff;\n    font-weight: 600;\n    box-shadow: 0px 5px 0px 0px rgba(255, 0, 0, 0.25);\n    border-radius: 10px;\n    cursor: pointer;\n    transition: 70ms;\n  }\n\n  .Burger {\n    display: none;\n    grid-area: burger;\n    margin: 0 20px 0 0;\n    padding: 0;\n    justify-self: end;\n    font-size: 40px;\n    border: none;\n    background: none;\n    outline: none;\n    transition: 0.1s;\n  }\n  .Burger:active {\n    transform: scale(1.2);\n  }\n\n  @media (max-width: 700px) {\n    .Nav {\n      grid-template-areas: \"logo burger\" \"nav nav\";\n    }\n    .Nav {\n      grid-template-rows: repeat(4, auto);\n      grid-template-columns: none;\n      grid-row-gap: 20px;\n\n      padding: 30px 0 30px;\n      background: rgba(40, 44, 47, 0.95);\n      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n      border-bottom-left-radius: 10px;\n      border-bottom-right-radius: 10px;\n    }\n    .Burger {\n      display: inline;\n    }\n  }\n\n  .desktop-links {\n    display: flex;\n  }\n\n  .mobile-links {\n    display: inline-block;\n  }\n\n  .NavAnimation-enter {\n    opacity: 0;\n    transform: scale(0.5);\n  }\n  .NavAnimation-enter-active {\n    opacity: 1;\n    transform: translateX(0);\n    transition: opacity 350ms, transform 350ms;\n  }\n  .NavAnimation-exit {\n    opacity: 1;\n  }\n  .NavAnimation-exit-active {\n    opacity: 0;\n    transform: scale(0.5);\n    transition: opacity 350ms, transform 350ms;\n  }\n`;\n\nexport default function Nav(props) {\n  const [isNavVisible, setNavVisibility] = useState(false);\n  const [isSmallScreen, setIsSmallScreen] = useState(false);\n\n  const renderLink = (link, path) => {\n    const highlight = link.to !== '/' ? path.includes(link.to) : path === '/';\n    return (\n      <div key={link.text} className={'link' + (highlight ? ' Highlight' : '')}>\n        <Link to={link.to}>{link.text}</Link>\n      </div>\n    );\n  };\n\n  const renderLinks = () => {\n    const { links, pathname } = props;\n\n    const parts = pathname.split('/');\n    const path = '/' + parts[1] + (parts[2] ? '/' + parts[2] : '');\n\n    return (\n      <div className={`${isNavVisible ? 'desktop-links' : 'mobile-links'}`}>\n        {links.map(link => {\n          return renderLink(link, path);\n        })}\n      </div>\n    );\n  }\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 700px)\");\n    mediaQuery.addListener(handleMediaQueryChange);\n    handleMediaQueryChange(mediaQuery);\n\n    return () => {\n      mediaQuery.removeListener(handleMediaQueryChange);\n    };\n  }, []);\n\n  const handleMediaQueryChange = mediaQuery => {\n    if (mediaQuery.matches) {\n      setIsSmallScreen(true);\n    } else {\n      setIsSmallScreen(false);\n    }\n  };\n\n  const toggleNav = () => {\n    setNavVisibility(!isNavVisible);\n  };\n\n  return (\n    <div css={headerStyle}>\n      <div className='Nav'>\n        <h1>Voting Methods</h1>\n        <CSSTransition\n          in={!isSmallScreen || isNavVisible}\n          timeout={350}\n          className='NavAnimation'\n          unmountOnExit\n        >\n          <div className={`${isNavVisible ? 'desktop-links' : 'mobile-links'}`}>\n            {renderLinks()}\n          </div>\n        </CSSTransition>\n        <button onClick={toggleNav} className='Burger'>\n          🍔\n        </button>\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}