{"ast":null,"code":"import _slicedToArray from \"/Users/melissa/cs91r/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/melissa/cs91r/src/components/Nav.js\";\n\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState, useEffect } from \"react\";\nimport { jsx, css } from '@emotion/core';\nimport { CSSTransition } from \"react-transition-group\";\nconst headerStyle = css`\n.Nav {\n  position: fixed;\n  top: 0; /* Stick it to the top */\n  max-height: 70px;\n  width: 100vw;\n\n  display: grid;\n  grid-template-areas: \"logo nav\";\n\n  /* Cosmetics */\n  background-color: #282c34;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n}\n\n.Logo {\n  grid-area: logo;\n  height: 70px;\n}\n\n.Nav {\n  display: grid;\n  grid-area: nav;\n  grid-template-columns: repeat(4, auto);\n  align-items: center;\n  justify-items: center;\n}\n.Nav a {\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  transition: 0.5s;\n  text-decoration: none;\n}\n.Nav a:hover {\n  transform: scale(1.1);\n}\n.Nav button {\n  padding: 10px;\n  outline: none;\n  border: none;\n  font-size: 20px;\n  color: #fff;\n  font-weight: 600;\n  background-color: rgba(255, 0, 0, 0.5);\n  box-shadow: 0px 5px 0px 0px rgba(255, 0, 0, 0.25);\n  border-radius: 10px;\n  cursor: pointer;\n  transition: 70ms;\n}\n\n.Nav button:active {\n  transform: translateY(3px);\n  box-shadow: 0px 2px 0px 0px rgba(255, 0, 0, 0.25);\n}\n\n.Burger {\n  display: none;\n  grid-area: burger;\n  margin: 0 20px 0 0;\n  padding: 0;\n  justify-self: end;\n  font-size: 40px;\n  border: none;\n  background: none;\n  outline: none;\n  transition: 0.1s;\n}\n.Burger:active {\n  transform: scale(1.2);\n}\n\n@media (max-width: 700px) {\n  .Nav {\n    grid-template-areas: \"logo burger\" \"nav nav\";\n  }\n  .Nav {\n    grid-template-rows: repeat(4, auto);\n    grid-template-columns: none;\n    grid-row-gap: 20px;\n\n    padding: 30px 0 30px;\n    background: rgba(40, 44, 47, 0.95);\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    border-bottom-left-radius: 10px;\n    border-bottom-right-radius: 10px;\n  }\n  .Burger {\n    display: inline;\n  }\n}\n\n.NavAnimation-enter {\n  opacity: 0;\n  transform: scale(0.5);\n}\n.NavAnimation-enter-active {\n  opacity: 1;\n  transform: translateX(0);\n  transition: opacity 350ms, transform 350ms;\n}\n.NavAnimation-exit {\n  opacity: 1;\n}\n.NavAnimation-exit-active {\n  opacity: 0;\n  transform: scale(0.5);\n  transition: opacity 350ms, transform 350ms;\n}\n`;\nexport default function Nav() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isNavVisible = _useState2[0],\n        setNavVisibility = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSmallScreen = _useState4[0],\n        setIsSmallScreen = _useState4[1];\n\n  const _this$props = this.props,\n        links = _this$props.links,\n        pathname = _this$props.pathname;\n\n  const renderLink = (link, path) => {\n    const highlight = link.to !== '/' ? path.includes(link.to) : path === '/';\n    return React.createElement(\"div\", {\n      key: link.text,\n      className: 'link' + (highlight ? ' Highlight' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: link.to,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, link.text));\n  };\n\n  const renderLinks = () => {\n    const _this$props2 = this.props,\n          links = _this$props2.links,\n          pathname = _this$props2.pathname;\n    const parts = pathname.split('/');\n    const path = '/' + parts[1] + (parts[2] ? '/' + parts[2] : '');\n    return React.createElement(\"div\", {\n      className: \"links\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, links.map(link => {\n      return renderLink(link, path);\n    }));\n  };\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 700px)\");\n    mediaQuery.addListener(handleMediaQueryChange);\n    handleMediaQueryChange(mediaQuery);\n    return () => {\n      mediaQuery.removeListener(handleMediaQueryChange);\n    };\n  }, []);\n\n  const handleMediaQueryChange = mediaQuery => {\n    if (mediaQuery.matches) {\n      setIsSmallScreen(true);\n    } else {\n      setIsSmallScreen(false);\n    }\n  };\n\n  const toggleNav = () => {\n    setNavVisibility(!isNavVisible);\n  };\n\n  return React.createElement(\"header\", {\n    className: \"Nav\",\n    css: headerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Voting Methods\"), React.createElement(CSSTransition, {\n    in: !isSmallScreen || isNavVisible,\n    timeout: 350,\n    classNames: \"NavAnimation\",\n    unmountOnExit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"nav\", {\n    className: \"Nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, this.renderlinks())), React.createElement(\"button\", {\n    onClick: toggleNav,\n    className: \"Burger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"\\uD83C\\uDF54\"));\n}","map":{"version":3,"sources":["/Users/melissa/cs91r/src/components/Nav.js"],"names":["React","useState","useEffect","jsx","css","CSSTransition","headerStyle","Nav","isNavVisible","setNavVisibility","isSmallScreen","setIsSmallScreen","props","links","pathname","renderLink","link","path","highlight","to","includes","text","renderLinks","parts","split","map","mediaQuery","window","matchMedia","addListener","handleMediaQueryChange","removeListener","matches","toggleNav","renderlinks"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState, useEffect } from \"react\";\nimport { jsx, css } from '@emotion/core';\nimport { CSSTransition } from \"react-transition-group\";\n\nconst headerStyle = css`\n.Nav {\n  position: fixed;\n  top: 0; /* Stick it to the top */\n  max-height: 70px;\n  width: 100vw;\n\n  display: grid;\n  grid-template-areas: \"logo nav\";\n\n  /* Cosmetics */\n  background-color: #282c34;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n}\n\n.Logo {\n  grid-area: logo;\n  height: 70px;\n}\n\n.Nav {\n  display: grid;\n  grid-area: nav;\n  grid-template-columns: repeat(4, auto);\n  align-items: center;\n  justify-items: center;\n}\n.Nav a {\n  color: #fff;\n  font-size: 20px;\n  font-weight: 500;\n  transition: 0.5s;\n  text-decoration: none;\n}\n.Nav a:hover {\n  transform: scale(1.1);\n}\n.Nav button {\n  padding: 10px;\n  outline: none;\n  border: none;\n  font-size: 20px;\n  color: #fff;\n  font-weight: 600;\n  background-color: rgba(255, 0, 0, 0.5);\n  box-shadow: 0px 5px 0px 0px rgba(255, 0, 0, 0.25);\n  border-radius: 10px;\n  cursor: pointer;\n  transition: 70ms;\n}\n\n.Nav button:active {\n  transform: translateY(3px);\n  box-shadow: 0px 2px 0px 0px rgba(255, 0, 0, 0.25);\n}\n\n.Burger {\n  display: none;\n  grid-area: burger;\n  margin: 0 20px 0 0;\n  padding: 0;\n  justify-self: end;\n  font-size: 40px;\n  border: none;\n  background: none;\n  outline: none;\n  transition: 0.1s;\n}\n.Burger:active {\n  transform: scale(1.2);\n}\n\n@media (max-width: 700px) {\n  .Nav {\n    grid-template-areas: \"logo burger\" \"nav nav\";\n  }\n  .Nav {\n    grid-template-rows: repeat(4, auto);\n    grid-template-columns: none;\n    grid-row-gap: 20px;\n\n    padding: 30px 0 30px;\n    background: rgba(40, 44, 47, 0.95);\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    border-bottom-left-radius: 10px;\n    border-bottom-right-radius: 10px;\n  }\n  .Burger {\n    display: inline;\n  }\n}\n\n.NavAnimation-enter {\n  opacity: 0;\n  transform: scale(0.5);\n}\n.NavAnimation-enter-active {\n  opacity: 1;\n  transform: translateX(0);\n  transition: opacity 350ms, transform 350ms;\n}\n.NavAnimation-exit {\n  opacity: 1;\n}\n.NavAnimation-exit-active {\n  opacity: 0;\n  transform: scale(0.5);\n  transition: opacity 350ms, transform 350ms;\n}\n`;\n\nexport default function Nav() {\n  const [isNavVisible, setNavVisibility] = useState(false);\n  const [isSmallScreen, setIsSmallScreen] = useState(false);\n  const { links, pathname } = this.props;\n\n  const renderLink = (link, path) => {\n    const highlight = link.to !== '/' ? path.includes(link.to) : path === '/';\n    return (\n      <div key={link.text} className={'link' + (highlight ? ' Highlight' : '')}>\n        <Link to={link.to}>{link.text}</Link>\n      </div>\n    );\n  };\n\n  const renderLinks = () => {\n    const { links, pathname } = this.props;\n\n    const parts = pathname.split('/');\n    const path = '/' + parts[1] + (parts[2] ? '/' + parts[2] : '');\n\n    return (\n      <div className=\"links\">\n        {links.map(link => {\n          return renderLink(link, path);\n        })}\n      </div>\n    );\n  }\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 700px)\");\n    mediaQuery.addListener(handleMediaQueryChange);\n    handleMediaQueryChange(mediaQuery);\n\n    return () => {\n      mediaQuery.removeListener(handleMediaQueryChange);\n    };\n  }, []);\n\n  const handleMediaQueryChange = mediaQuery => {\n    if (mediaQuery.matches) {\n      setIsSmallScreen(true);\n    } else {\n      setIsSmallScreen(false);\n    }\n  };\n\n  const toggleNav = () => {\n    setNavVisibility(!isNavVisible);\n  };\n\n  return (\n    <header className=\"Nav\" css={headerStyle}>\n      <h1>Voting Methods</h1>\n      <CSSTransition\n        in={!isSmallScreen || isNavVisible}\n        timeout={350}\n        classNames=\"NavAnimation\"\n        unmountOnExit\n      >\n        <nav className=\"Nav\">\n          {this.renderlinks()}\n        </nav>\n      </CSSTransition>\n      <button onClick={toggleNav} className=\"Burger\">\n        🍔\n      </button>\n    </header>\n  );\n}"]},"metadata":{},"sourceType":"module"}