{"ast":null,"code":"var _jsxFileName = \"/Users/isabelle/Documents/College/Spring 2020/CS91R/voting-methods/src/viz/Landing.js\";\nimport React, { Component } from 'react';\nimport { Scrollama, Step } from 'react-scrollama';\nimport { select, selectAll, mouse } from 'd3-selection';\nimport { csv } from 'd3-fetch';\nimport { path } from 'd3-path';\nimport { scaleOrdinal } from 'd3-scale';\nimport { transition } from 'd3-transition';\nimport { nest } from 'd3-collection';\nimport { geoPath } from 'd3-geo';\nimport { geoRobinson } from 'd3-geo-projection'; //import d3Tip from 'd3-tip';\n\nimport * as topojson from 'topojson-client';\nimport topoData from '../assets/data/countries.json';\nconst d3 = {\n  select,\n  selectAll,\n  mouse,\n  csv,\n  path,\n  scaleOrdinal,\n  transition,\n  nest,\n  geoRobinson,\n  geoPath\n};\nexport default class Landing extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: 0,\n      steps: [10, 20, 30],\n      progress: 0\n    };\n\n    this.onStepEnter = ({\n      element,\n      data\n    }) => {\n      this.setState({\n        data\n      });\n    };\n  }\n\n  componentDidMount() {\n    d3.csv(`${process.env.PUBLIC_URL}/data/voting-methods-country.csv`).then(res => {\n      this.initialize(topoData, res);\n    });\n  }\n\n  initialize(topoData, voteData) {\n    const margin = {\n      top: 20,\n      right: 40,\n      bottom: 40,\n      left: 40\n    };\n    const width = 1200 - margin.left - margin.right;\n    const height = 800 - margin.top - margin.bottom;\n    var svg = d3.select('#viz').append('svg').attr('width', width).attr('height', height);\n    var systems = d3.nest().key(d => d[\"Electoral system for national legislature\"]).entries(voteData).map(d => d.key);\n    console.log(systems);\n    const color = d3.scaleOrdinal().domain(systems).range([\"#48A36D\", \"#64B98C\", \"#80CEAA\", \"#7FC9BD\", \"#7EC4CF\", \"#7FB1CF\", \"#809ECE\", \"#8F90CD\", \"#9E81CC\", \"#B681BE\", \"#CE80B0\", \"#D76D8F\", \"#E05A6D\", \"#E26962\", \"#E37756\", \"#E39158\", \"#E2AA59\", \"#DFB95C\", \"#DBC75F\", \"#EAD67C\"]);\n    svg.append('g').attr('class', 'methods').selectAll('text').data(systems).enter().append('text').text(d => d).style('fill', d => color(d)).attr('transform', (d, i) => 'translate(1000,' + (100 + 40 * i) + ')').on('mouseover', function (d) {\n      svg.select('.methods').style('cursor', 'pointer');\n      update(svg, d);\n    }).on('mouseout', function (d) {\n      svg.select('.methods').style('cursor', 'default');\n      update(svg, null);\n    });\n    svg.append('g').attr('class', 'map-base');\n    update(svg, null);\n\n    function update(svg, system) {\n      // console.log(topoData);\n      // console.log(voteData);\n      //console.log(system);\n      var projection = d3.geoRobinson().scale(160).translate([svg.attr('width') / 2 - 100, svg.attr('height') / 2]);\n      const path = d3.geoPath().projection(projection);\n      var filteredVoteData;\n      var entries;\n\n      if (system) {\n        filteredVoteData = voteData.filter(d => d[\"Electoral system for national legislature\"] === system);\n        entries = d3.nest().key(d => d.Country).object(filteredVoteData);\n      } else {\n        filteredVoteData = voteData;\n        entries = [];\n      } //console.log(entries);\n      // var countries = entries.map((d) => d.key );\n      //console.log(countries);\n\n\n      const world = topojson.feature(topoData, topoData.objects.countries).features; // var topoCountries = world.map((d) => d.properties.name);\n      //var unmatchedCountries = countries.filter((c) => !topoCountries.includes(c));\n      //console.log(unmatchedCountries);\n\n      var mapBase = svg.select('.map-base');\n      var mapSelect = mapBase.selectAll('path').data(world);\n      mapSelect.exit().remove();\n      var map = mapSelect.enter().append('path').merge(mapSelect).attr('d', path);\n      map.transition();\n      map.attr('fill', function (d) {\n        if (entries[convertCountry(d.properties.name)]) {\n          return color(system);\n        } else {\n          return '#eeedf0';\n        }\n      }).attr('stroke', '#dcdfe3').attr('stroke-width', 1).style('opacity', function (d) {\n        return 1;\n      });\n    }\n\n    function convertCountry(country) {\n      // LOL\n      const conversions = {\n        \"Antigua and Barb.\": \"Antigua and Barbuda\",\n        \"Bosnia and Herz.\": \"Bosnia and Herzegovina\",\n        \"Brunei\": \"Brunei Darussalam\",\n        \"Cabo Verde\": \"Cape Verde\",\n        \"Cayman Is.\": \"Cayman Islands\",\n        \"Central African Rep.\": \"Central African Republic\",\n        \"Dem. Rep. Congo\": \"Congo, Democratic Republic of\",\n        \"Cook Is.\": \"Cook Islands\",\n        \"CÃ´te d'Ivoire\": \"Cote d'Ivoire\",\n        \"N. Cyprus\": \"Cyprus (North)\",\n        \"Czechia\": \"Czech Republic\",\n        \"Dominican Rep.\": \"Dominican Republic\",\n        \"Eq. Guinea\": \"Equatorial Guinea\",\n        \"Falkland Is.\": \"Falkland Islands (Malvinas)\",\n        \"Vatican\": \"Holy See (Vatican City State)\",\n        \"Iran\": \"Iran, Islamic Republic of\",\n        \"Laos\": \"Lao People's Dem. Republic\",\n        \"Marshall Is.\": \"Marshall Islands\",\n        \"Micronesia\": \"Micronesia, Federated States of\",\n        \"Moldova\": \"Moldova, Republic of\",\n        \"Congo\": \"Republic of The Congo (Brazzaville)\",\n        \"Russia\": \"Russian Federation\",\n        \"North Korea\": \"Korea, Dem. People's Republic of\",\n        \"South Korea\": \"Korea, Republic of\",\n        \"St. Kitts and Nevis\": \"Saint Kitts and Nevis\",\n        \"St. Vin. and Gren.\": \"Saint Vincent and The Grenadines\",\n        \"Solomon Is.\": \"Solomon Islands\",\n        \"eSwatini\": \"Swaziland\",\n        \"S. Sudan\": \"South Sudan\",\n        \"Palestine\": \"State of Palestine\",\n        \"Syria\": \"Syrian Arab Republic\",\n        \"Tanzania\": \"Tanzania, United Republic of\",\n        \"Turks and Caicos Is.\": \"Turks and Caicos Islands\",\n        \"United States of America\": \"United States\",\n        \"Vietnam\": \"Viet Nam\",\n        \"British Virgin Is.\": \"Virgin Islands, British\"\n      };\n\n      if (Object.keys(conversions).includes(country)) {\n        return conversions[country];\n      } else {\n        return country;\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"viz\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/isabelle/Documents/College/Spring 2020/CS91R/voting-methods/src/viz/Landing.js"],"names":["React","Component","Scrollama","Step","select","selectAll","mouse","csv","path","scaleOrdinal","transition","nest","geoPath","geoRobinson","topojson","topoData","d3","Landing","state","data","steps","progress","onStepEnter","element","setState","componentDidMount","process","env","PUBLIC_URL","then","res","initialize","voteData","margin","top","right","bottom","left","width","height","svg","append","attr","systems","key","d","entries","map","console","log","color","domain","range","enter","text","style","i","on","update","system","projection","scale","translate","filteredVoteData","filter","Country","object","world","feature","objects","countries","features","mapBase","mapSelect","exit","remove","merge","convertCountry","properties","name","country","conversions","Object","keys","includes","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Scrollama, Step } from 'react-scrollama';\nimport { select, selectAll, mouse } from 'd3-selection';\nimport { csv } from 'd3-fetch';\nimport { path } from 'd3-path';\nimport { scaleOrdinal } from 'd3-scale';\nimport { transition } from 'd3-transition';\nimport { nest } from 'd3-collection';\nimport { geoPath } from 'd3-geo';\nimport { geoRobinson } from 'd3-geo-projection';\n//import d3Tip from 'd3-tip';\nimport * as topojson from 'topojson-client';\n\nimport topoData from '../assets/data/countries.json';\n\nconst d3 = { select, selectAll, mouse, csv, path, scaleOrdinal, transition, nest,\n  geoRobinson, geoPath };\n\nexport default class Landing extends Component {\n\n  state = {\n    data: 0,\n    steps: [10, 20, 30],\n    progress: 0,\n  };\n\n  onStepEnter = ({ element, data }) => {\n    this.setState( { data });\n  }\n\n\n  componentDidMount() {\n    d3.csv(`${process.env.PUBLIC_URL}/data/voting-methods-country.csv`).then(res => {\n      this.initialize(topoData, res);\n    });\n  }\n\n  initialize(topoData, voteData) {\n\n\n   const margin = { top: 20, right: 40, bottom: 40, left: 40 };\n\n  const width = 1200 - margin.left - margin.right;\n  const height = 800 - margin.top - margin.bottom;\n\n  var svg = d3\n      .select('#viz')\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height);\n\n    var systems = d3.nest()\n        .key((d) => d[\"Electoral system for national legislature\"])\n        .entries(voteData)\n        .map((d) => d.key);\n    console.log(systems);\n\n\n    const color = d3\n        .scaleOrdinal()\n        .domain(systems)\n        .range([\"#48A36D\", \"#64B98C\", \"#80CEAA\", \"#7FC9BD\", \"#7EC4CF\", \"#7FB1CF\", \"#809ECE\", \"#8F90CD\", \"#9E81CC\", \"#B681BE\", \"#CE80B0\", \"#D76D8F\", \"#E05A6D\", \"#E26962\", \"#E37756\", \"#E39158\", \"#E2AA59\", \"#DFB95C\", \"#DBC75F\", \"#EAD67C\"]);\n\n  svg.append('g')\n      .attr('class', 'methods')\n      .selectAll('text')\n      .data(systems)\n      .enter()\n      .append('text')\n      .text((d) => d)\n      .style('fill', (d) => color(d))\n      .attr('transform', (d, i) => 'translate(1000,' + (100+ 40*i) + ')')\n      .on('mouseover', function(d) {\n          svg.select('.methods').style('cursor', 'pointer');\n        update(svg, d);\n      }).on('mouseout', function(d) {\n      svg.select('.methods').style('cursor', 'default');\n      update(svg, null);\n  });\n\n  svg.append('g')\n      .attr('class', 'map-base')\n\n  update(svg, null);\n\n  function update(svg, system) {\n      // console.log(topoData);\n      // console.log(voteData);\n      //console.log(system);\n\n     var projection = d3\n        .geoRobinson()\n        .scale(160)\n        .translate([svg.attr('width') / 2 - 100, svg.attr('height') / 2]);\n\n     const path = d3.geoPath().projection(projection);\n      var filteredVoteData;\n      var entries;\n     if (system) {\n         filteredVoteData = voteData.filter((d) => d[\"Electoral system for national legislature\"] === system);\n         entries = d3.nest()\n             .key((d) => d.Country )\n             .object(filteredVoteData);\n     } else {\n         filteredVoteData = voteData;\n         entries = [];\n     }\n\n\n     //console.log(entries);\n\n    // var countries = entries.map((d) => d.key );\n     //console.log(countries);\n\n     const world = topojson.feature(topoData, topoData.objects.countries).features;\n    // var topoCountries = world.map((d) => d.properties.name);\n\n    //var unmatchedCountries = countries.filter((c) => !topoCountries.includes(c));\n    //console.log(unmatchedCountries);\n    var mapBase = svg.select('.map-base');\n\n     var mapSelect = mapBase\n        .selectAll('path')\n        .data(world);\n\n     mapSelect.exit().remove();\n\n      var map = mapSelect.enter()\n        .append('path')\n        .merge(mapSelect)\n        .attr('d', path);\n\n      map.transition();\n\n      map.attr('fill', function(d) {\n            if (entries[convertCountry(d.properties.name)]) {\n                return color(system);\n            } else {\n                return '#eeedf0';\n            }\n        })\n        .attr('stroke', '#dcdfe3')\n        .attr('stroke-width', 1)\n        .style('opacity', function(d) {\n          return 1;\n        });\n\n  }\n\n  function convertCountry(country){\n  // LOL\n    const conversions = {\n      \"Antigua and Barb.\": \"Antigua and Barbuda\",\n      \"Bosnia and Herz.\":  \"Bosnia and Herzegovina\",\n      \"Brunei\": \"Brunei Darussalam\",\n      \"Cabo Verde\": \"Cape Verde\",\n      \"Cayman Is.\": \"Cayman Islands\",\n      \"Central African Rep.\": \"Central African Republic\",\n      \"Dem. Rep. Congo\": \"Congo, Democratic Republic of\",\n      \"Cook Is.\": \"Cook Islands\",\n      \"CÃ´te d'Ivoire\": \"Cote d'Ivoire\",\n      \"N. Cyprus\": \"Cyprus (North)\",\n      \"Czechia\": \"Czech Republic\",\n      \"Dominican Rep.\": \"Dominican Republic\",\n      \"Eq. Guinea\": \"Equatorial Guinea\",\n      \"Falkland Is.\": \"Falkland Islands (Malvinas)\",\n      \"Vatican\": \"Holy See (Vatican City State)\",\n      \"Iran\": \"Iran, Islamic Republic of\",\n      \"Laos\": \"Lao People's Dem. Republic\",\n      \"Marshall Is.\": \"Marshall Islands\",\n      \"Micronesia\": \"Micronesia, Federated States of\",\n      \"Moldova\": \"Moldova, Republic of\",\n      \"Congo\": \"Republic of The Congo (Brazzaville)\",\n      \"Russia\":  \"Russian Federation\",\n      \"North Korea\": \"Korea, Dem. People's Republic of\",\n      \"South Korea\": \"Korea, Republic of\",\n      \"St. Kitts and Nevis\": \"Saint Kitts and Nevis\",\n      \"St. Vin. and Gren.\": \"Saint Vincent and The Grenadines\",\n      \"Solomon Is.\": \"Solomon Islands\",\n      \"eSwatini\": \"Swaziland\",\n      \"S. Sudan\": \"South Sudan\",\n      \"Palestine\": \"State of Palestine\",\n      \"Syria\": \"Syrian Arab Republic\",\n      \"Tanzania\": \"Tanzania, United Republic of\",\n      \"Turks and Caicos Is.\": \"Turks and Caicos Islands\",\n      \"United States of America\": \"United States\",\n      \"Vietnam\": \"Viet Nam\",\n      \"British Virgin Is.\": \"Virgin Islands, British\"\n\n  }\n    if (Object.keys(conversions).includes(country)) {\n        return conversions[country];\n    } else {\n        return country;\n    }\n}\n\n}\n\n\n\n\n\n  render() {\n    return (\n        <div id=\"viz\"></div>\n\n      )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}